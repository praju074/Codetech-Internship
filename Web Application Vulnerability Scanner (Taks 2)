import urllib.request
import urllib.parse

class SimpleVulnerabilityScanner:
    def __init__(self, base_url):
        self.base_url = base_url
        self.vulnerabilities = []

    def make_request(self, params):
        try:
            query_string = urllib.parse.urlencode(params)
            full_url = self.base_url + "?" + query_string
            with urllib.request.urlopen(full_url) as response:
                return response.read().decode("utf-8")
        except Exception as e:
            print("Request failed:", e)
            return ""

    def scan_sql_injection(self):
        payload = "' OR '1'='1"
        print("[*] Checking for SQL Injection...")
        response = self.make_request({"input": payload})
        if "sql" in response.lower() or "syntax" in response.lower():
            self.vulnerabilities.append("SQL Injection Detected")

    def scan_xss(self):
        payload = "<script>alert('XSS')</script>"
        print("[*] Checking for XSS...")
        response = self.make_request({"search": payload})
        if payload in response or urllib.parse.quote(payload) in response:
            self.vulnerabilities.append("XSS Detected")

    def scan_open_redirect(self):
        payload = "http://example.com"
        print("[*] Checking for Open Redirect...")
        response = self.make_request({"url": payload})
        if "example.com" in response:
            self.vulnerabilities.append("Open Redirect Detected")

    def run(self):
        print("🔍 Starting scan...\n")
        self.scan_sql_injection()
        self.scan_xss()
        self.scan_open_redirect()
        print("\n🛡️ Scan Results:")
        if self.vulnerabilities:
            for vuln in self.vulnerabilities:
                print("- " + vuln)
        else:
            print("No vulnerabilities detected.")

if __name__ == "__main__":
    url = input("Enter target URL (e.g., https://postman-echo.com/get): ")
    scanner = SimpleVulnerabilityScanner(url)
    scanner.run()
